// Easter bunny
// ===================== Flag 32 x 13======================
byte pict[] = {
2,0,9,61,147,3,0,9,61,147,4,0,9,61,147,5,0,9,61,147,6,0,9,61,147,7,0,9,61,147,8,0,9,61,147,9,0,9,61,147,10,0,9,61,147,11,0,9,61,147,12,0,9,61,147,13,0,194,33,20,14,0,194,33,20,15,0,194,33,20,16,0,194,33,20,17,0,194,33,20,18,0,194,33,20,19,0,194,33,20,20,0,194,33,20,21,0,194,33,20,22,0,194,33,20,23,0,194,33,20,24,0,194,33,20,25,0,194,33,20,26,0,194,33,20,27,0,194,33,20,28,0,194,33,20,29,0,194,33,20,
2,1,9,61,147,3,1,255,255,255,4,1,9,61,147,5,1,255,255,255,6,1,9,61,147,7,1,255,255,255,8,1,9,61,147,9,1,255,255,255,10,1,9,61,147,11,1,255,255,255,12,1,9,61,147,13,1,255,255,255,14,1,255,255,255,15,1,255,255,255,16,1,255,255,255,17,1,255,255,255,18,1,255,255,255,19,1,255,255,255,20,1,255,255,255,21,1,255,255,255,22,1,255,255,255,23,1,255,255,255,24,1,255,255,255,25,1,255,255,255,26,1,255,255,255,27,1,255,255,255,28,1,255,255,255,29,1,255,255,255,
2,2,9,61,147,3,2,9,61,147,4,2,255,255,255,5,2,9,61,147,6,2,255,255,255,7,2,9,61,147,8,2,255,255,255,9,2,9,61,147,10,2,255,255,255,11,2,9,61,147,12,2,9,61,147,13,2,194,33,20,14,2,194,33,20,15,2,194,33,20,16,2,194,33,20,17,2,194,33,20,18,2,194,33,20,19,2,194,33,20,20,2,194,33,20,21,2,194,33,20,22,2,194,33,20,23,2,194,33,20,24,2,194,33,20,25,2,194,33,20,26,2,194,33,20,27,2,194,33,20,28,2,194,33,20,29,2,194,33,20,
2,3,9,61,147,3,3,255,255,255,4,3,9,61,147,5,3,255,255,255,6,3,9,61,147,7,3,255,255,255,8,3,9,61,147,9,3,255,255,255,10,3,9,61,147,11,3,255,255,255,12,3,9,61,147,13,3,255,255,255,14,3,255,255,255,15,3,255,255,255,16,3,255,255,255,17,3,255,255,255,18,3,255,255,255,19,3,255,255,255,20,3,255,255,255,21,3,255,255,255,22,3,255,255,255,23,3,255,255,255,24,3,255,255,255,25,3,255,255,255,26,3,255,255,255,27,3,255,255,255,28,3,255,255,255,29,3,255,255,255,
2,4,9,61,147,3,4,9,61,147,4,4,255,255,255,5,4,9,61,147,6,4,255,255,255,7,4,9,61,147,8,4,255,255,255,9,4,9,61,147,10,4,255,255,255,11,4,9,61,147,12,4,9,61,147,13,4,194,33,20,14,4,194,33,20,15,4,194,33,20,16,4,194,33,20,17,4,194,33,20,18,4,194,33,20,19,4,194,33,20,20,4,194,33,20,21,4,194,33,20,22,4,194,33,20,23,4,194,33,20,24,4,194,33,20,25,4,194,33,20,26,4,194,33,20,27,4,194,33,20,28,4,194,33,20,29,4,194,33,20,
2,5,9,61,147,3,5,255,255,255,4,5,9,61,147,5,5,255,255,255,6,5,9,61,147,7,5,255,255,255,8,5,9,61,147,9,5,255,255,255,10,5,9,61,147,11,5,255,255,255,12,5,9,61,147,13,5,255,255,255,14,5,255,255,255,15,5,255,255,255,16,5,255,255,255,17,5,255,255,255,18,5,255,255,255,19,5,255,255,255,20,5,255,255,255,21,5,255,255,255,22,5,255,255,255,23,5,255,255,255,24,5,255,255,255,25,5,255,255,255,26,5,255,255,255,27,5,255,255,255,28,5,255,255,255,29,5,255,255,255,
2,6,9,61,147,3,6,9,61,147,4,6,9,61,147,5,6,9,61,147,6,6,9,61,147,7,6,9,61,147,8,6,9,61,147,9,6,9,61,147,10,6,9,61,147,11,6,9,61,147,12,6,9,61,147,13,6,194,33,20,14,6,194,33,20,15,6,194,33,20,16,6,194,33,20,17,6,194,33,20,18,6,194,33,20,19,6,194,33,20,20,6,194,33,20,21,6,194,33,20,22,6,194,33,20,23,6,194,33,20,24,6,194,33,20,25,6,194,33,20,26,6,194,33,20,27,6,194,33,20,28,6,194,33,20,29,6,194,33,20,
2,7,255,255,255,3,7,255,255,255,4,7,255,255,255,5,7,255,255,255,6,7,255,255,255,7,7,255,255,255,8,7,255,255,255,9,7,255,255,255,10,7,255,255,255,11,7,255,255,255,12,7,255,255,255,13,7,255,255,255,14,7,255,255,255,15,7,255,255,255,16,7,255,255,255,17,7,255,255,255,18,7,255,255,255,19,7,255,255,255,20,7,255,255,255,21,7,255,255,255,22,7,255,255,255,23,7,255,255,255,24,7,255,255,255,25,7,255,255,255,26,7,255,255,255,27,7,255,255,255,28,7,255,255,255,29,7,255,255,255,
2,8,194,33,20,3,8,194,33,20,4,8,194,33,20,5,8,194,33,20,6,8,194,33,20,7,8,194,33,20,8,8,194,33,20,9,8,194,33,20,10,8,194,33,20,11,8,194,33,20,12,8,194,33,20,13,8,194,33,20,14,8,194,33,20,15,8,194,33,20,16,8,194,33,20,17,8,194,33,20,18,8,194,33,20,19,8,194,33,20,20,8,194,33,20,21,8,194,33,20,22,8,194,33,20,23,8,194,33,20,24,8,194,33,20,25,8,194,33,20,26,8,194,33,20,27,8,194,33,20,28,8,194,33,20,29,8,194,33,20,
2,9,255,255,255,3,9,255,255,255,4,9,255,255,255,5,9,255,255,255,6,9,255,255,255,7,9,255,255,255,8,9,255,255,255,9,9,255,255,255,10,9,255,255,255,11,9,255,255,255,12,9,255,255,255,13,9,255,255,255,14,9,255,255,255,15,9,255,255,255,16,9,255,255,255,17,9,255,255,255,18,9,255,255,255,19,9,255,255,255,20,9,255,255,255,21,9,255,255,255,22,9,255,255,255,23,9,255,255,255,24,9,255,255,255,25,9,255,255,255,26,9,255,255,255,27,9,255,255,255,28,9,255,255,255,29,9,255,255,255,
2,10,194,33,20,3,10,194,33,20,4,10,194,33,20,5,10,194,33,20,6,10,194,33,20,7,10,194,33,20,8,10,194,33,20,9,10,194,33,20,10,10,194,33,20,11,10,194,33,20,12,10,194,33,20,13,10,194,33,20,14,10,194,33,20,15,10,194,33,20,16,10,194,33,20,17,10,194,33,20,18,10,194,33,20,19,10,194,33,20,20,10,194,33,20,21,10,194,33,20,22,10,194,33,20,23,10,194,33,20,24,10,194,33,20,25,10,194,33,20,26,10,194,33,20,27,10,194,33,20,28,10,194,33,20,29,10,194,33,20,
2,11,255,255,255,3,11,255,255,255,4,11,255,255,255,5,11,255,255,255,6,11,255,255,255,7,11,255,255,255,8,11,255,255,255,9,11,255,255,255,10,11,255,255,255,11,11,255,255,255,12,11,255,255,255,13,11,255,255,255,14,11,255,255,255,15,11,255,255,255,16,11,255,255,255,17,11,255,255,255,18,11,255,255,255,19,11,255,255,255,20,11,255,255,255,21,11,255,255,255,22,11,255,255,255,23,11,255,255,255,24,11,255,255,255,25,11,255,255,255,26,11,255,255,255,27,11,255,255,255,28,11,255,255,255,29,11,255,255,255,
2,12,194,33,20,3,12,194,33,20,4,12,194,33,20,5,12,194,33,20,6,12,194,33,20,7,12,194,33,20,8,12,194,33,20,9,12,194,33,20,10,12,194,33,20,11,12,194,33,20,12,12,194,33,20,13,12,194,33,20,14,12,194,33,20,15,12,194,33,20,16,12,194,33,20,17,12,194,33,20,18,12,194,33,20,19,12,194,33,20,20,12,194,33,20,21,12,194,33,20,22,12,194,33,20,23,12,194,33,20,24,12,194,33,20,25,12,194,33,20,26,12,194,33,20,27,12,194,33,20,28,12,194,33,20,29,12,194,33,20
};


void Neomatrix_scroll_picture(byte xoffset, byte pic_row, byte pic_col) {
  byte x, y, red, green, blue;
  uint16_t mcolor1;

  int pixel_num = sizeof(pict)/5;
  matrix.setBrightness(55);

  byte nscroll = 0;
  for (byte mm = 0 ; mm < pic_row + 9  ; mm++) {  // to scroll all the picture + 9
    matrix.fillScreen(0); 
     
    for (int nn = 0 ; nn < pixel_num ; nn++) {
      x = pict[nn*5] + xoffset;
      y = pict[nn*5+1] - nscroll + 8;
    
      if (y > -1 && y < 8) {
        red = pict[nn*5+2];
        green = pict[nn*5+3];
        blue = pict[nn*5+4];

        mcolor1 = matrix.Color(red,green,blue);
        matrix.drawPixel(x, y, mcolor1); 
        //Serial.println(x);
        //delay(1);
      }
    }
    //delay(60);
    delay(100);
    matrix.show();
    nscroll = (nscroll + 1); // % (pic_row+4);
  }
}

// ================================================
/*
void Neomatrix_scroll_picture2(byte xoffset, byte pic_row, byte pic_col) {
  byte x, y, red, green, blue;
  uint16_t mcolor1;
  int pixel_num = sizeof(pict2)/5;
  matrix.setBrightness(55);

  byte nscroll = 0;
  for (byte mm = 0 ; mm < pic_row + 9  ; mm++) {  // to scroll all the picture + 9
    matrix.fillScreen(0); 
     
    for (int nn = 0 ; nn < pixel_num ; nn++) {
      x = pict2[nn*5] + xoffset;
      y = pict2[nn*5+1] - nscroll + 8;
    
      if (y > -1 && y < 8) {
        red = pict2[nn*5+2];
        green = pict2[nn*5+3];
        blue = pict2[nn*5+4];

        mcolor1 = matrix.Color(red,green,blue);
        matrix.drawPixel(x, y, mcolor1); 
        //Serial.println(x);
        //delay(1);
      }
    }
    delay(60);
    matrix.show();
    nscroll = (nscroll + 1); // % (pic_row+4);
  }
}
*/
